"""Convert allowed venues to foreign key

Revision ID: ce8ca8ebe029
Revises: 5e48dc411113
Create Date: 2024-01-30 01:34:25.399340

"""

# revision identifiers, used by Alembic.
revision = 'ce8ca8ebe029'
down_revision = '5e48dc411113'

from alembic import op
import sqlalchemy as sa


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('proposal_allowed_venues_version',
    sa.Column('proposal_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('venue_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('transaction_id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('operation_type', sa.SmallInteger(), nullable=False),
    sa.PrimaryKeyConstraint('proposal_id', 'venue_id', 'transaction_id', name=op.f('pk_proposal_allowed_venues_version'))
    )
    op.create_index(op.f('ix_proposal_allowed_venues_version_operation_type'), 'proposal_allowed_venues_version', ['operation_type'], unique=False)
    op.create_index(op.f('ix_proposal_allowed_venues_version_transaction_id'), 'proposal_allowed_venues_version', ['transaction_id'], unique=False)
    allowed_venues_tbl = op.create_table('proposal_allowed_venues',
    sa.Column('proposal_id', sa.Integer(), nullable=False),
    sa.Column('venue_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['proposal_id'], ['proposal.id'], name=op.f('fk_proposal_allowed_venues_proposal_id_proposal')),
    sa.ForeignKeyConstraint(['venue_id'], ['venue.id'], name=op.f('fk_proposal_allowed_venues_venue_id_venue')),
    sa.PrimaryKeyConstraint('proposal_id', 'venue_id', name=op.f('pk_proposal_allowed_venues'))
    )

    conn = op.get_bind()
    meta = sa.MetaData(bind=conn)
    meta.reflect(only=('proposal', 'venue'))
    proposal_tbl = sa.Table('proposal', meta)
    venue_tbl = sa.Table('venue', meta)
    venue_names = sa.func.unnest(sa.func.string_to_array(proposal_tbl.c.allowed_venues, ",")).table_valued()
    proposal_to_venue_select = (
        sa.select(proposal_tbl.c.id, venue_tbl.c.id)
        .join_from(venue_names, venue_tbl, venue_tbl.c.name == venue_names.column)
    )
    op.execute(
        allowed_venues_tbl
        .insert().from_select(['proposal_id', 'venue_id'], proposal_to_venue_select)
    )

    op.drop_column('proposal', 'allowed_venues')
    op.drop_column('proposal_version', 'allowed_venues')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('tag_version', 'tag',
               existing_type=sa.VARCHAR(),
               nullable=False,
               autoincrement=False)
    op.add_column('proposal_version', sa.Column('allowed_venues', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('proposal', sa.Column('allowed_venues', sa.VARCHAR(), autoincrement=False, nullable=True))

    conn = op.get_bind()
    meta = sa.MetaData(bind=conn)
    meta.reflect(only=('proposal', 'venue', 'proposal_allowed_venues'))
    proposal_tbl = sa.Table('proposal', meta)
    venue_tbl = sa.Table('venue', meta)
    proposal_allowed_venues_tbl = sa.Table('proposal_allowed_venues', meta)
    op.execute(
        sa.update(proposal_tbl)
        .values(allowed_venues=sa.func.array_to_string(sa.func.array(
            sa.select(venue_tbl.c.name)
            .where(proposal_allowed_venues_tbl.c.venue_id == venue_tbl.c.id)
            .where(proposal_allowed_venues_tbl.c.proposal_id == proposal_tbl.c.id)
            .scalar_subquery()
        ), ','))
    )

    op.drop_table('proposal_allowed_venues')
    op.drop_index(op.f('ix_proposal_allowed_venues_version_transaction_id'), table_name='proposal_allowed_venues_version')
    op.drop_index(op.f('ix_proposal_allowed_venues_version_operation_type'), table_name='proposal_allowed_venues_version')
    op.drop_table('proposal_allowed_venues_version')
    # ### end Alembic commands ###
