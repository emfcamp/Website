"""Create default_for_types and allowed_types on Venue

Revision ID: 8dd432ba3ede
Revises: ce8ca8ebe029
Create Date: 2024-01-30 02:40:15.284397

"""

# revision identifiers, used by Alembic.
revision = '8dd432ba3ede'
down_revision = 'ce8ca8ebe029'

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('tag_version', 'tag',
               existing_type=sa.VARCHAR(),
               nullable=True,
               autoincrement=False)
    op.add_column('venue', sa.Column('allowed_types', postgresql.ARRAY(sa.String()), nullable=True))
    op.add_column('venue', sa.Column('default_for_types', postgresql.ARRAY(sa.String()), nullable=True))

    conn = op.get_bind()
    meta = sa.MetaData(bind=conn)
    meta.reflect(only=('venue',))
    venue_tbl = sa.Table('venue', meta)

    op.execute(
        sa.update(venue_tbl)
        .values(allowed_types=sa.func.string_to_array(venue_tbl.c.type, ','))
    )
    for venue_name, default_for_types in [
        ('Stage A', ['talk']),
        ('Stage B', ['talk', 'performance', 'lightning']),
        ('Stage C', ['talk', 'lightning']),
        ('Workshop 1', ['workshop']),
        ('Workshop 2', ['workshop']),
        ('Workshop 3', ['workshop']),
        ('Workshop 4', ['workshop']),
        ('Workshop 5', ['workshop']),
        ('Youth Workshop', ['youthworkshop']),
    ]:
        op.execute(sa.update(venue_tbl).where(venue_tbl.c.name == venue_name).values(default_for_types=default_for_types))

    op.drop_column('venue', 'type')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('venue', sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_column('venue', 'default_for_types')
    op.drop_column('venue', 'allowed_types')

    conn = op.get_bind()
    meta = sa.MetaData(bind=conn)
    meta.reflect(only=('venue',))
    venue_tbl = sa.Table('venue', meta)
    
    op.execute(
        sa.update(venue_tbl)
        .values(type=sa.func.array_to_string(venue_tbl.c.allowed_types, ','))
    )

    op.alter_column('tag_version', 'tag',
               existing_type=sa.VARCHAR(),
               nullable=False,
               autoincrement=False)
    # ### end Alembic commands ###
